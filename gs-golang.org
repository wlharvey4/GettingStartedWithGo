#+TEXINFO_FILENAME: gs-golang.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+SUBTITLE:
#+SUBAUTHOR:
#+TEXINFO_DIR_CATEGORY: Go
#+TEXINFO_DIR_TITLE: Getting Started Golang
#+TEXINFO_DIR_DESC: getting started with Golang
#+TEXINFO_PRINTED_TITLE:Getting Started With Go
#+OPTIONS: H:4
#+TITLE: Getting Started With Go
#+AUTHOR: WLHarvey4
#+DATE: 2018-12-06

* Course Info

** Name
Getting Started with Go

** Source
University of California, Irvine

** Instructor
 Ian Harris, Professor, Department of Computer Science

*** Welcome from the Instructor
Welcome  to Getting  Started  with  Go! You’re  joining  thousands of  learners
currently enrolled in the course. I'm excited to have you in the class and look
forward to your contributions to the learning community.

To begin, I recommend  taking a few minutes to explore  the course site. Review
the material we’ll cover each week,  and preview the assignments you’ll need to
complete to  pass the  course. Click  Discussions to see  forums where  you can
discuss the course material with fellow students taking the class.

If you have questions  about course content, please post them  in the forums to
get help from  others in the course community. For  technical problems with the
Coursera platform, visit the [[http://learner.coursera.help/][Learner Help Center]].

Good luck as you get started, and I hope you enjoy the course!

** About the Course
Learn  the  basics  of  Go,  an open  source  programming  language  originally
developed by a team  at Google and enhanced by many  contributors from the open
source  community.  This  course  is designed  for  individuals  with  previous
programming experience using  such languages as C, Python, or  Java, and covers
the fundamental elements of Go.  Topics include data types, protocols, formats,
and writing code that incorporates RFCs and JSON. Most importantly, you’ll have
a  chance to  practice  writing  Go programs  and  receive  feedback from  your
peers.  Upon completing  this course,  you'll be  able to  implement simple  Go
programs, which will prepare you for subsequent study at a more advanced level.

** Level
Intermediata

** Specialization
Course 1 in the @@texinfo:@cite{Programming With Google Go Specialization}@@

** How It Works

*** General

**** How do I pass the course
To earn your Course Certificate, you’ll need to earn a passing grade on each of
the  required assignments—these  can  be quizzes,  peer-graded assignments,  or
programming assignments. Videos, readings, and  practice exercises are there to
help you prepare for the graded assignments.

**** What do start dates and end dates mean
Once  you enroll,  you’ll have  access to  all videos,  readings, quizzes,  and
programming assignments  (if applicable). If  you choose to explore  the course
without purchasing, you  may not be able to access  certain assignments. If you
don’t finish all graded assignments before the end of the course, you can reset
your deadlines. Your progress will be saved and you’ll be able to pick up where
you left off.

**** What are due dates? Is there a penalty for submitting my work after a due date
Within a course, there are suggested due dates to help you manage your schedule
and keep coursework from piling up.  Quizzes and programming assignments can be
submitted  late without  consequence. However,  it is  possible that  you won't
receive a  grade if  you submit  your peer-graded  assignment too  late because
classmates  usually  review assignment  within  three  days of  the  assignment
deadline.

**** Can I re-attempt an assignment
Yes. If  you want to improve  your grade, you  can always try again.  If you’re
re-attempting a peer-graded assignment, re-submit your  work as soon as you can
to make sure  there’s enough time for  your classmates to review  your work. In
some cases you  may need to wait before re-submitting  a programming assignment
or quiz. We encourage you to review course material during this delay.

*** Peer-Graded Assignments
Peer-graded assignments require  you and your classmates to  grade each other’s
work.

**** How do peer graded assignments work
After  you  submit your  work,  you’ll  be  asked  to review  your  classmates’
assignments. To  pass, you’ll need to  earn a passing grade  on your submission
and complete the required number of reviews.

**** How are grades calculated
You and your classmates  will be asked to provide a score for  each part of the
assignment.  Final grades  are calculated  by combining  the median  scores you
received for each section.

**** What kind of feedback should I give
Be respectful,  encouraging, and  honest. Acknowledge  what your  classmate did
well and  offer specific  suggestions on  how they  can improve.  Scores should
reflect the learner’s understanding of  the assignment prompt and points should
not be deducted for difficulties with language or differences in opinion.

**** Is there a penalty for submitting my work late
No, but  it’s important to  submit your work  as close to  the due date  as you
can. Classmates  grade most  of the  assignments within three  days of  the due
date. If  you submit yours  too late,  there may not  be anyone to  review your
work.

**** If I fail an assignment, can I try again
Yes! You can always try again, but you’ll need to resubmit your work as soon as
possible to make sure your classmates have enough time to grade your work.

**** Can I edit my assignment
Yes,  but you’ll  need to  re-submit  your work  and any  grade you’ve  already
received will be deleted.

** Syllabus

*** Introduction to the Course
Learn  the  basics  of  Go,  an open  source  programming  language  originally
developed by a team  at Google and enhanced by many  contributors from the open
source community. This is the first in a series of three courses comprising the
Programming with Google Go specialization.  It is designed for individuals with
previous programming experience using such languages as C, Python, or Java, and
covers the  fundamental elements of  Go. Topics include data  types, protocols,
formats, and  writing code that  incorporates RFCs and JSON.  Most importantly,
you’ll have a chance to practice  writing Go programs and receive feedback from
your peers. Upon completing this course,  you’ll be able to implement simple Go
programs,  which  will prepare  you  for  the  remaining  two courses  in  this
specialization: Functions, Methods, and Interfaces in Go and Concurrency in Go.

**** Contents
- One video :: Welcome to the Course
- Reading :: Go Documentation

*** Module 1 --- Getting Started with Go
This first module  gets you started with Go. You'll  learn about the advantages
of using  Go and begin  exploring the  language's features. Midway  through the
module,  you’ll take  a  break from  "theory" and  install  the Go  programming
environment on your computer.  At the end of the module,  you'll write a simple
program that displays “Hello, World” on your screen.

**** Videos
1. Module 1 Overview
2. Why Should I Learn Go? (Advantages of Go)
3. Objects
4. Concurrency
5. Installing Go
6. Workspaces and Packages
7. Go Tool
8. Variables
9. Variable Initialization

**** Activity
- ``Hello, world''

**** Quiz
- Module 1 quiz

*** Module 2 --- Basic Data Types
Now that you’ve set up your programming environment and written a test program,
you’re ready to dive  into data types. This module introduces  data types in Go
and gives you practice writing routines that manipulate different kinds of data
objects, including floating-point numbers and strings.

**** Reading
Read This First!

**** Videos
1. Module 2 Overview
2. Pointers
3. Variable Scope
4. Deallocating Memory
5. Garbage Collection
6. Comments, Printing, Integers
7. Ints, Floats, Strings
8. String Packages
9. Constants
10. Control Flow
11. Control Flow, Scan

**** Activities
- @@texinfo:@file{trunc.go}@@
- @@texinfo:@file{findian.go}@@

**** Quiz
Module 2 quiz

*** Module 3 --- Composite Data Types
At this  point, we’re  ready to  move into more  complex data  types, including
arrays, slices,  maps, and structs.  As in the  previous module, you’ll  have a
chance to practice writing code that makes use of these data types.

**** Videos
1. Module 3 Overview
2. Arrays
3. Slices
4. Variable Slices
5. Hash Tables
6. Maps
7. Structs

**** Activity
- @@texinfo:@file{slice.go}@@

**** Quiz
- Module 3 Quiz

*** Module 4 --- Protocols and Formats
This final  module of the  course introduces the  use of remote  function calls
(RFCs) and JavaScript Object Notation (JSON)  in Go. You’ll learn how to access
and  manipulate data  from external  files, and  have an  opportunity to  write
several routines using Go that exercise this functionality.

**** Videos
1. Module 4 Overview
2. RFCs
3. JSON
4. File Access, ~ioutil~
5. File Acces, ~os~

**** Activities
- @@texinfo:@file{makejson.go}@@
- @@texinfo:@file{read.go}@@

* Introductions

** To the Specialization

*** Welcome to the Programming with Google Go Specialization!
This intermediate-level, three-course sequence  is designed for individuals who
have had some experience programming in  another language but now wish to learn
about the  features and  capabilities of  Go. The courses  provide a  review of
essential  programming concepts,  as needed,  to ensure  that all  learners are
sufficiently comfortable  with the  basics before  learning about  the features
that are peculiar  to Go. (Please note that the  original specialization design
called for four courses but development  of the fourth course has been deferred
to a later  time. For now, please disregard the  occasional references that the
instructor makes to this fourth course.)

The first course, Getting Started with Go, introduces the basic elements of the
language including  unique features such  as slices  that are not  available in
other  programming environments.  The  second course,  Functions, Methods,  and
Interfaces in Go, expands your knowledge  of Go with a focus on object-oriented
features such as classes and encapsulation,  and allows you to practice writing
code to  solve practical problems. The  third and final course,  Concurrency in
Go, shows you how to write Go  code that executes more rapidly through parallel
execution in multi-processor environments.

The courses feature video lectures by  Professor Ian Harris from the University
of   California,   Irvine  and   are   accompanied   by  automatically   graded
multiple-choice quizzes  and peer-reviewed programming assignments.  While most
of the information needed to  complete the programming assignments is presented
within the context of the courses (i.e. by the lecturer), we encourage students
to  take  advantage  of  the  many resources  that  are  available  online  for
clarification and further learning.

** To the Course

*** Introduction to the Course
Learn  the  basics  of  Go,  an open  source  programming  language  originally
developed by a team  at Google and enhanced by many  contributors from the open
source community. This is the first in a series of three courses comprising the
Programming with Google Go specialization.  It is designed for individuals with
previous programming experience using such languages as C, Python, or Java, and
covers the  fundamental elements of  Go. Topics include data  types, protocols,
formats, and  writing code that  incorporates RFCs and JSON.  Most importantly,
you’ll have a chance to practice  writing Go programs and receive feedback from
your peers. Upon completing this course,  you’ll be able to implement simple Go
programs,  which  will prepare  you  for  the  remaining  two courses  in  this
specialization: Functions, Methods, and Interfaces in Go and Concurrency in Go.

*** Welcome to the Course

#+BEGIN_QUOTE

Welcome to the course, Course One. The point of this course is to give you some
first-tier working knowledge of the Go language and how to use it. I'm assuming
that you  already have some experience  programming in other languages,  so I'm
not talking  from scratch  here. I'm assuming  you already have  seen a  lot of
these  concepts. You  know data  types, you  know things  like this,  but maybe
you're familiar with C or Python or Java or something like that and you want to
move over to Go. Maybe you want to start programming systems devices right. You
want to do  some more low-level stuff but  you don't want to go  straight to C,
let's say, or you've been dealing in C in a long time and you want your life to
be easier  right? Something like that.  In fact, Go on  the whole is a  sort of
sweet spot, where  it's efficient, close to  C, but it's also easy  to use like
say maybe Python or  Java, has a lot of that. So it's  in-between, and so we're
going to just hit  on all the basics in this class,  in this particular course,
and you should  be able to program something  and get a feel for it  and see if
you even like this language at all, and if you can be comfortable with it.

#+END_QUOTE

:CI:
#+CINDEX: documentation, getting started
:END:

*** Getting Started With Go Documentation
Here is some [[https://golang.org/doc/#learning][Go  documentation]] that helps you get started  setting up and using
Go. You  don't have to  read all of  it now, just know  that it exists  and can
serve as a valuable resource.

* Module 1 --- Overview

#+BEGIN_QUOTE

Point of  this first  module is  to talk  about more  fully four  things. First
thing, is  we want to talk  about Go, why it's  good, why is unique.  Right? We
want to motivate you,  to just tell you why do you need  even learn this in the
first place  as compared to existing  languages because there are  many, right?
So,  we'll talk  about that.  Then, we'll  have you  start using  Go. So,  this
specifically  means installing  the  Go environment  and  compiling your  first
program, you need to get through that before you can go on with the rest of the
course. So, we'll walk you through the installation process and show you how to
compile  a program  and  see  if it  works  as a  sanity  check  for the  whole
setup. Then,  will start talking  about the code organization,  the recommended
court organization. So, workspace, how you define your workspace, how it should
be organized, how Go code is organized into packages to allow you to share. So,
big point of Go is sharing with other people. Right? Because if you think about
any  real software  you write,  it's  always big.  Right? You  work with  other
people's. Almost never just  you alone. So, you got to  share and packages help
to make  that easy and  to organize the  code so you  can trade your  code with
other  people. Then,  at the  end  of this  module, we'll  start talking  about
variables. Start talk  about the language itself, so the  variables, what types
there are,  and how do  you do scoping, how  variable scoping happens,  how you
basically resolve  the value  of a  variable depending on  where it  occurs and
where it's defined.

#+END_QUOTE

** Advantages of Go
1. Code runs fast
2. Garbage collection
3. Simpler objects

** Objects

#+BEGIN_QUOTE

So, Go language is object-oriented,  but let's say, weakly object-oriented.  it
implements objects  but maybe they  have fewer features  than you would  see in
another object-oriented language  like Python or Java or C++  or something like
that.  Now, I should note right now,  Go does not use this term class.  instead
they use  structs.  Now  structs, actually,  this goes back  to C  and probably
before that.  But  the idea of a struct  is a struct is just the  data. So, the
different types of data that you want to associate together.  So, just the data
are related  together. But  also you  can associate  methods or  functions with
those structs. So, the struct ends up being like what you would call a class in
a normal object-oriented language. So, you  got the structs that had some data,
some fields  of data associated  with them plus some  methods that you  want to
define.  Now,  Go's  implementation  of   structs  is  simplified  compared  to
traditional  implementation of  classes. So,  you don't  have inheritance,  you
don't have constructors, and you don't have generics, none of those. Now, this,
one  can argue  it makes  it easier  to  code, also  it makes  it efficient  to
run. So, it typically runs faster. But it can make it easier to code unless you
like  those  features.  Now,  if  you'd like  inheritance,  and  generics,  and
constructors. Then, you can see this is a disadvantage. But Go is different. It
has objects  but is  different than traditional  object-oriented implementation
and a linear object-oriented implementation.

#+END_QUOTE

** Concurrency

#+BEGIN_QUOTE

One of  the big advantages  of Go, is  its implementation of  concurrency.  So,
we'll talk a little  bit right now about concurrency, what it  is, and why it's
useful, and  how Go  implements it,  how there are  built-in constructs  in the
language that  make it easy  to use concurrency.  a  lot of the  motivation for
concurrency comes  from the need for  speed.  Concurrency is the  management of
multiple  tasks  at the  same  time.   So,  concurrent programming  it  enables
parallelism.  asks  can be alive and  communicating the same time,  then if you
have  the resources,  the parallel  resources multiple  cores, multiple  memory
stuff like  this then you  can map them onto  those parallel resources  and get
parallelism. So, you can't  just take a regular piece of code  and say okay I'm
going to run  it on five cores,  that won't work. The programmer  has to decide
how to partition this code. I want this running on one core, this on another, I
want this  data here  this data there  and so on.   So, that's  what concurrent
programming is about.  The program is  making these decisions that allow things
to run in parallel. If parallel if the hardware exists.  But management of task
execution, so  when our test  starts and stops,  how do two  tests communicate,
send data back  and forth, share memory  if they share memory and  how did they
synchronize? So,  there are times  where one task has  to do something  for the
next task  can start.  So, there are  times where two  tasks can't  be executed
completely in  parallel. There has  to be  some sequential behavior.  This test
can't start until this task ends and  so on. So, that's synchronization and you
have  to  be  able  to  manage  that  inside  your  programming  language.  The
programming   basically  have   to   say,  express   inside   the  code   where
synchronization needs to occur and where it doesn't. So, that's what concurrent
programming  is  and  it is  important  if  you  want  to be  able  to  exploit
parallelism when  it exists.  So, concurrency  in Go.  So, basically  the thing
about  Go, is  that Go  has a  lot of  concurrency primitives  built-in to  the
language and  implemented efficiently. So,  Go routines,  each one of  these Go
routines represents a  concurrent tasks, basically a thread.  Channels are used
for concurrent  for communication between  concurrent tasks. Select is  used to
enable synchronization. These  are just the high level basic  keywords that you
can use. But  we'll talk more about  these later on in  the specialization. But
concurrency, having concurrency  built into the language and  have an efficient
implementation  is advantageous  if you're  doing concurrent  programming which
more and  more, especially with  all the cores  that exists in  processes these
days has become more and more important.

#+END_QUOTE

** Installing Go

** Workspaces and Packages

** Go Tool

** Variables

** Variable Initialization
* Index
:PROPERTIES:
:INDEX: cp
:END:
